'use strict';
console.log('-----desafio n춿 1-----');
//*Julia y Kate est치n haciendo un estudio sobre perros. As칤 que cada uno de ellos pregunt칩 a 5 due침os de perros sobre la edad de su perro y almacen칩 los datos en una matriz (una matriz para cada uno). Para ahora, solo les interesa saber si un perro es adulto o cachorro. Un perro es adulto si tiene al menos 3 a침os y es cachorro si tiene menos de 3 a침os.

//Cree una funci칩n 'checkDogs', que acepte 2 matrices de edades de perros ('dogsJulia' y 'dogsKate'), y hace lo siguiente:
//1. Julia descubri칩 que los due침os del primero y de los dos 칰ltimos perros en realidad son 춰gatos, no perros! As칤 que cree una copia superficial de la matriz de Julia y elimine los gatos, de esa matriz copiada (porque es una mala pr치ctica mutar la funci칩n par치metros)
//2. Cree una matriz con los datos de Julia (corregidos) y Kate
//3. Para cada perro restante, registre en la consola si es un adulto ("El perro n칰mero 1 es un adulto y tiene 5 a침os") o un cachorro ("El perro n칰mero 2 todav칤a es un cachorro 游냤").
//4. Ejecute la funci칩n para ambos conjuntos de datos de prueba
//console.log(checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]));

//Test data:
//춶 Data 1: Julia's data [3, 5, 2, 12, 7], Kate's data [4, 1, 15, 8, 3]
//춶 Data 2: Julia's data [9, 16, 6, 8, 3], Kate's data [10, 5, 6, 1, 4]

const checkDogs = function (dogJ, dogK) {
  //creamos solo la copia y luego eliminamos de esa copia los gatos
  const newDogJ = dogJ.slice();
  //primero eliminamos el primer elemento
  newDogJ.splice(0, 1);
  //eliminamos los 2 ultimos
  newDogJ.splice(-2);
  const Dogs = [...newDogJ, ...dogK];
  //const Dogs = newDogJ.concat(dogK);
  Dogs.forEach(function (p, i) {
    if (p >= 3) {
      console.log(`el perro n춿 ${i + 1} es un adulto y tiene ${p} a침os`);
    } else {
      console.log(
        `el perro n춿 ${i + 1} aun es un cachorro 游냤y tiene ${p} a침os `
      );
    }
  });
};

console.log(checkDogs([3, 5, 2, 12, 7], [4, 1, 15, 8, 3]));

console.log('---DESAFIO N춿 2---');
//Volvamos al estudio de Julia y Kate sobre perros. Esta vez, quieren convertir las edades de los perros con las edades de los humanos y calcule la edad promedio de los perros en su estudio.
//Sus tareas:
//Cree una funci칩n 'calcAverageHumanAge', que acepte matrices de datos de perros edades ('edades'), y hace lo siguiente en orden:
//1. Calcula la edad del perro en a침os humanos usando la siguiente f칩rmula: si el perro es <= 2 a침os, humanAge = 2 * dogAge. Si el perro tiene > 2 a침os, edadhumana = 16 + edadperro * 4
//2. Excluya todos los perros que tengan menos de 18 a침os humanos (que es lo mismo que tener perros que tengan al menos 18 a침os)
//3. Calcula la edad humana promedio de todos los perros adultos (ya deber칤as saberlo) de otros desaf칤os c칩mo calculamos los promedios 游땔)
//4. Ejecute la funci칩n para ambos conjuntos de datos de prueba
//Datos de prueba:
const edades1 = [5, 2, 4, 1, 15, 8, 3];
// Dato 2: [16, 6, 10, 5, 6, 1, 4]

const calcAverageHumanAge = function (edades) {
  const humanAge = edades
    .map(function (mov) {
      if (mov <= 2) return 2 * mov;
      else return 16 + mov * 4;
    })
    .filter(function (mov) {
      if (mov >= 18) return mov;
    });
  const suma = humanAge.reduce(function (acu, ele, i, arr) {
    return acu + ele / arr.length;
  }, 0);
  console.log(suma);
};
calcAverageHumanAge(edades1);

console.log('----DESAFIO N춿 3----');
//* Vuelva a escribir la funci칩n 'calcAverageHumanAge' del Desaf칤o n.췈 2, pero esta vez como una funci칩n de flecha, y usando encadenamiento!
const calcAverageHumanAge1 = function (edades) {
  const humanAge = edades
    .map(mov => {
      return mov <= 2 ? mov * 2 : 16 + mov * 4;
    })
    .filter(mov => mov >= 18)
    .reduce((acum, mov, i, arr) => acum + mov / arr.length, 0);
  console.log(humanAge);
};
calcAverageHumanAge1(edades1);
